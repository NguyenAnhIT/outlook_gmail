(() => {
    const ID_USER = require('RelayAPIConfigDefaults').actorID;
    const fb_dtsg = require('MRequestConfig').dtsg.token;
    let ACCESS_TOKEN = prompt('Vui lòng nhập AceesToken: ')
    let TIME_SLEEP = 5;
    let TIME_CRON = 2;
    let LIMIT_POST = 5;
    let LIMIT_CMT = 1;

    const randomNumber = (min, max) => {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    };

    const sendMes = async (userId, body) => {
        try {
            const formData = new URLSearchParams();
            formData.append('__user', ID_USER);
            formData.append('fb_dtsg', fb_dtsg);
            formData.append('wwwupp', 'C3');
            formData.append('ids', userId);
            formData.append('body', body);

            const response = await fetch(
                'https://m.facebook.com/messages/send/?icm=1&entrypoint=web:trigger:jewel_see_all_messages&refid=12',
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: formData,
                }
            );
            let res = await response.text();
        } catch (error) {
            console.error(error);
        }
        return Promise.resolve(true);
    };

    const commentPost = async (idPost, text) => {
        try {
            const formData = new URLSearchParams();
            formData.append('comment_text', text);
            formData.append('fb_dtsg', fb_dtsg);
            formData.append('privacy_value', 0);
            formData.append('conversation_guide_session_id', '');
            formData.append('conversation_guide_shown', 'none');
            formData.append('submit', 'Đăng');

            const response = await fetch(
                'https://m.facebook.com/a/comment.php?fs=8&actionsource=2&comment_logging&ft_ent_identifier=' +
                    idPost,
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: formData,
                }
            );
            let res = await response.text();
            console.log(`Comment : ${idPost}`);
        } catch (error) {
            console.error(error);
        }

        return Promise.resolve(true);
    };

    const shareLink = async (targetId, idPost) => {
        try {
            const formData = new URLSearchParams();
            formData.append('__user', ID_USER);
            formData.append('fb_dtsg', fb_dtsg);
            formData.append('ids', targetId);
            formData.append('comment', '');
            formData.append('m', 'message');
            formData.append('id', '');
            formData.append('sid', idPost);
            formData.append('fs', 1);
            formData.append('fr', '');
            formData.append('im', 'message');
            formData.append('session_id', '');
            formData.append('app_id', '');
            formData.append('referrer', '');

            const response = await fetch(
                'https://m.facebook.com/a/sharer.php?shouldRedirectToPermalink=1&usedialogwithselector&isthrowbackpost',
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: formData,
                }
            );
            let res = await response.text();
        } catch (error) {
            console.error(error);
        }
        return Promise.resolve(true);
    };

    const getIdPhoto = async userId => {
        let result = [];
        try {
            const response = await fetch(
                `https://m.facebook.com/profile.php?id=${userId}`
            );
            let res = await response.text();
            const regex = /photo\.php\?fbid=(\d+)/gm;

            let m;
            while ((m = regex.exec(res)) !== null) {
                if (m.index === regex.lastIndex) {
                    regex.lastIndex++;
                }
                result.push(m[1]);
            }
            if (result.length > 2) result.length = 2;
        } catch (error) {
            console.error(error);
        }
        return Promise.resolve(result);
    };

    // const getAccessToken = async () => {
        
    //     // try {
    //     //     const response = await fetch(
    //     //         'https://m.facebook.com/composer/ocelot/async_loader/?publisher=feed'
    //     //     );
    //     //     const res = await response.text();
    //     //     const regEx = /"accessToken\\":\\"(.+?)\\"/gm.exec(res);
    //     //     console.log(regEx)
    //     //     return Promise.resolve(regEx[1]);
    //     // } catch (error) {
    //     //     console.error(error);
    //     // }
    //     return "EAAGNO4a7r2wBAIwJTtHAFZBauMKa1dxNTXT6jaHGsl2uquuMOS0klZCLsOUfDSejPTVkKRdDJelVdj04unz3WvWWiepfFcpafactT1PlA9CoKWrcUXZCV7RZAwef0ZB92U7KD0kWdXj7A8K3tmqqzzTx5ULdqjKsi7CKgewc34wZDZD"
    // };

    const likePost = async idPost => {
        try {
            const formData = new URLSearchParams();
            formData.append('__user', ID_USER);
            formData.append('fb_dtsg', fb_dtsg);
            formData.append('reaction_type', 1);
            formData.append('ft_ent_identifier', idPost);

            const response = await fetch(
                `https://m.facebook.com/ufi/reaction/?ft_ent_identifier=${idPost}&story_render_location=timeline&feedback_source=0&is_sponsored=0`,
                {
                    method: 'POST',
                    body: formData,
                }
            );
            let res = await response.text();
            console.log(`Like : ${idPost}`);
        } catch (error) {
            console.error(error);
        }
        return Promise.resolve(true);
    };

    const addFriend = async idUser => {
        try {
            const formData = new URLSearchParams();
            formData.append('__user', ID_USER);
            formData.append('fb_dtsg', fb_dtsg);

            const response = await fetch(
                `https://m.facebook.com/a/friends/profile/add/?subject_id=${idUser}&is_timeline=1&how_found=profile_button`,
                {
                    method: 'POST',
                    body: formData,
                }
            );
            let res = await response.text();
            console.log(`Thêm bạn bè: ${idUser}`);
        } catch (error) {
            console.error(error);
        }
        return Promise.resolve(true);
    };




    const getNewsFeed =  uri => {
        return new Promise(function (resolve, reject) {
            const data = null;

            const xhr = new XMLHttpRequest();
            xhr.withCredentials = true;

            xhr.addEventListener("readystatechange", function () {
            if (this.readyState === this.DONE) {
                let { data, paging } =  JSON.parse(this.responseText)

                resolve({data: data.map(
                    item => item.id.split('_')[1]),
                    next: paging.next})
            }
            });

            xhr.open("GET", uri);
            xhr.send(data);
          });
    }
    
    

 


    const getAllNewsFeed = async (userId, LIMIT = 30) => {
        var res = [];
        try {
            let uri = `https://graph.facebook.com/v3.3/${userId}/posts?fields=id&access_token=${ACCESS_TOKEN}`;
            while (res.length < LIMIT) {
                const { data, next } = await getNewsFeed(uri)
                console.log(data)
                res.push(...data);
                console.log(res.length)
                uri = next;                    
            }  
            
        } catch (error) {
            console.error(error);
        }
        if (res.length > LIMIT) res.length = LIMIT;
            return Promise.resolve(res);

        
            
        
        
        
    };

    const wait = time => {
        return new Promise(resolve => setTimeout(resolve, time * 1000));
    };

    const task = async (idUser, content, cmt, LIMIT = 10, TIMEOUT = 1) => {
        try {
            console.log('-----------------------------');
            console.log(`Bắt đầu : ${idUser}`);
            const listNeedLike = [];
            const first = await Promise.all([
                ACCESS_TOKEN,
                getIdPhoto(idUser),
            ]);

            listNeedLike.push(...first[1]);
            ACCESS_TOKEN = first[0];

            const listPost = await getAllNewsFeed(idUser, LIMIT);
            console.log(listPost)
            listNeedLike.push(...listPost);

            await addFriend(idUser);

            for (const post of listNeedLike) {
                await likePost(post);
                await wait(TIMEOUT);
            }

            for (let i = 2; i < listNeedLike.length; i++) {
                if (i - 2 >= LIMIT_CMT) break;
                await commentPost(
                    listNeedLike[i],
                    cmt[randomNumber(0, cmt.length - 1)]
                );
                await wait(TIMEOUT);
            }

            const listContent = content.split('|');

            console.log(`Đang gửi tin nhắn : ${idUser}`);
            for (const nd of listContent) {
                if (parseInt(nd)) await shareLink(idUser, nd);
                else await sendMes(idUser, nd);
                await wait(TIMEOUT);
            }
            console.log(`Đã xong : ${idUser}`);
        } catch (error) {
            console.error(error);
        }
        return Promise.resolve(true);
    };

    const run = async () => {
        TIME_SLEEP = 15; //Thời gian giữa mỗi lần xoay content;
        TIME_CRON = 5; // Thời gian giữa mỗi lần like hoặc gửi tin nhắn
        LIMIT_POST = 2; // Số lượng post trên newsfeed muốn lấy
        LIMIT_CMT = 1; // số lượng bài viết sẽ cmt

        const txtUID = prompt('Nhập danh sách UID : ');
        const listUID = txtUID.split('\r\n');

        // const txtContent = prompt('Nhập Content :');
        // const listContent = txtContent.split('\r\n');

        const txtContent = `em chào anh chị ạ|em bên Đồng Phục HV|bên mình có nhu cầu làm áo đồng phục không ạ ?|cho em xin sđt zalo để nhân viên sale tư vấn được không ạ?
em chào a/c ạ|em bên Xưởng May Đồng Phục HV|bên mình cần tư vấn về đồng phục k ạ ?|cho e xin sđt zalo để nv sale tư vấn ạ ?
em chào anh chị|em là nhân viên Đồng Phục HV|bên e cung cấp áo phông đồng phục cho cty và nhà hàng, áo họp lớp, áo nhóm|bên mình cho e xin sđt zalo để nv sale tư vấn ạ ?`;
        const listContent = txtContent.split('\n');

        const txtCmt =
            'bên mình check inbox e nhé | check tin nhắn e nhé | check ib ạ | check tin nhắn ạ | kiểm tra tin nhắn ạ | a/c check tin nhắn nhé | a/c ktra tin nhắn ạ | ktra tin nhắn ạ | check ib e nhé | mình check ib giúp e ạ';
        const listCmt = txtCmt.split('|');

        let indexContent = 0;
        let index = 1;
        for (const uid of listUID) {
            await task(
                uid,
                listContent[indexContent],
                listCmt,
                LIMIT_POST,
                TIME_CRON
            );
            console.log(`Đã hoàn thành : ${index} / ${listUID.length}`);
            indexContent++;

            if (indexContent === listContent.length) indexContent = 0;
            index++;
            await wait(TIME_SLEEP);
        }
    };

    run();
})();


